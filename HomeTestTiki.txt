package PerpareInteview;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Stack;

public class HomeTestTiki {
    
    public static void main(String[] args){
        
        Scanner scanner = new Scanner(System.in);
        
        int testCase = scanner.nextInt();
        DecimalFormat df = new DecimalFormat("0.###");

        HashMap<String, String> hm = new HashMap<String, String>();
        String cellName = "";
        String cellContent = "";
        
        for(int i = 0; i < testCase; i++) {
            
            cellName = scanner.next();
            cellContent = scanner.next();
            
            if(checkDouble(cellContent) == true) {
                
                // Format CellContent, when CellContent is double and is a number.
                // Example: 
                // A1 = 3.0 => A1 = 3
                hm.put(cellName, String.valueOf(df.format(Double.parseDouble(cellContent))));
            } else {
                
                hm.put(cellName, cellContent);
            }
        }

        // Sorted alphabetically by the cell names.
        ArrayList<String> sortedKeys = new ArrayList<String>(hm.keySet());
        Collections.sort(sortedKeys);
        
        for(String key : sortedKeys) {

           // The content of the cell is a mathematic formula
           // and the formula can also refer to other cells.
           if(checkDouble(hm.get(key)) == false){

               for(String x : sortedKeys) {
                   
                   if(hm.get(key).contains(x)) {

                        // eplace cell names with their values.
                        // example:
                        // A1 = 3, A2 = A15*B1+, B1 = 6
                        // => A1 = 3, A2 = 3|5*6|+, B1 = 6
                        hm.put(key, hm.get(key).replace(x, hm.get(x) + "|"));
                   }
               }

               // Calculate the value of the mathematical formula.
               hm.put(key, String.valueOf(df.format(calculateValueCell(hm.get(key)))));
           }
        }
        
        for(String ke : sortedKeys){
            
            System.out.println(ke);
            System.out.println(hm.get(ke));
        }

    }

    // Check the content of the cell is Double type.
    private static boolean checkDouble(String str){
        
        boolean numeric = true;

        try {

            Double num = Double.parseDouble(str);
        } catch (NumberFormatException e) {

            numeric = false;
        }
        
        if(numeric) {

            return true;
        } else {

            return false;
        }
    }

    // Calculate the value of the mathematical formula.
    public static double calculateValueCell(String cellContent) {
        
        // Convert mathematical formula into an array of only numbers and operations.
        // Example:
        // String "21+3*" => {"2", "1", "+", "3", "*"};
        cellContent = cellContent.replace("+", "|+|")
                .replace("-", "|-|")
                .replace("*", "|*|")
                .replace("/", "|/|");
        
        while(cellContent.indexOf("||") != -1) {
            
            cellContent = cellContent.replace("||", "|");
        }

        String[] mathFormula = cellContent.split("[|]");
     
        double returnValue = 0;
        String operators = "+-*/";

        Stack<String> stack = new Stack<String>();

        for (String t : mathFormula) {

            //push to stack if it is a number
            if (!operators.contains(t)) {

                stack.push(t);
            } else {

                //pop numbers from stack if it is an operator
                double a = Double.valueOf(stack.pop());
                double b = Double.valueOf(stack.pop());

                    switch (t) {
                        case "+":
                            stack.push(String.valueOf(a + b));
                            break;
                        case "-":
                            stack.push(String.valueOf(b - a));
                            break;
                        case "*":
                            stack.push(String.valueOf(a * b));
                            break;
                        case "/":
                            stack.push(String.valueOf(b / a));
                            break;
                    }   
            }
        }

        returnValue = Double.valueOf(stack.pop());

        return returnValue;
    }
}
